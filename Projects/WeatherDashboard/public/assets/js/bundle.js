/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var MyCustomLibrary;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/bundle.js":
/*!***********************!*\
  !*** ./src/bundle.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("__webpack_require__( /*! ./js/index */ \"./src/js/index.js\");\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://MyCustomLibrary/./src/bundle.js?");

/***/ }),

/***/ "./src/js/index.js":
/*!*************************!*\
  !*** ./src/js/index.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _weatherReportParams_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./weatherReportParams.mjs */ \"./src/js/weatherReportParams.mjs\");\n/* harmony import */ var _weatherReportClass_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./weatherReportClass.mjs */ \"./src/js/weatherReportClass.mjs\");\n/* harmony import */ var _countries_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./countries.mjs */ \"./src/js/countries.mjs\");\n/* harmony import */ var _weatherReportMethods_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./weatherReportMethods.mjs */ \"./src/js/weatherReportMethods.mjs\");\n/*\r\n * Script       :index.js\r\n * Author       :Richard Maida Jimenez\r\n * Date         :October 2024.\r\n * Version      :1.0.\r\n * Description  :Commuter code for the Weather Report Web Page.\r\n * \r\n * Version     Date        Author                  Comments\r\n * -------     -------     ---------------------   --------\r\n * 1.00        12/11/2024  Richard Maida Jimenez   Weather Report Web Site.\r\n */\r\n/*\r\n * Declare Imports.\r\n */\r\n\r\n\r\n\r\n\r\n/*\r\n * Instantiate Weather Report Params Class.\r\n */\r\nlet weatherReportParams = null;\r\n\r\nweatherReportParams = new _weatherReportParams_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n/*\r\n * Get the Form Element objects.\r\n */\r\nlet  edlLocationCtrl = document.getElementById( 'edlLocation' );\r\nlet   selCountryCtrl = document.getElementById( 'selCountry' );       //querySelector( 'selCountry' );\r\nconst   btnEnterCtrl = document.getElementById( 'btnEnter' );\r\nconst   btnClearCtrl = document.getElementById( 'btnClear' );\r\n/*\r\n * Event Listeners.\r\n */\r\naddEventListener( 'DOMContentLoaded', eventDOMContentLoaded() );\r\naddEventListener( 'load', eventLoad );\r\n/*\r\n * Form Control Event Listeners.\r\n */\r\nbtnEnterCtrl.addEventListener( 'click', eventClickBtnEnter );\r\nbtnClearCtrl.addEventListener( 'click', eventClickBtnClear );\r\n/*\r\n * Event Methods.\r\n */\r\nfunction eventDOMContentLoaded() {\r\n    /*\r\n     * DOMContentLoaded: HTML minus the CSS.\r\n     * USAGE:\r\n     * ------\r\n     *  IN: N/A.\r\n     * OUT: N/A.\r\n     */\r\n    let countryCodesNames = [];\r\n\r\n    logEvent( 'DOM Content Event Loading....' );\r\n\r\n    sessionStorage.clear();\r\n    weatherReportParams.initParams();\r\n    \r\n    logEvent( `1 ${weatherReportParams.getAppName()}` );\r\n    logEvent( `2 ${weatherReportParams.getUrlAddPrefix()}` );\r\n    logEvent( weatherReportParams.getUrlAddAppId() );\r\n    logEvent( weatherReportParams.getUrlAppUnitMeasure() );\r\n    logEvent( weatherReportParams.getUrlIcon() );\r\n    logEvent( weatherReportParams.getAppNarrative1() );\r\n    logEvent( weatherReportParams.getAppNarrative2() );\r\n    logEvent( weatherReportParams.getAppInstructs() );\r\n    logEvent( weatherReportParams.getPoweredBy() );\r\n    logEvent( weatherReportParams.getReportPath() );\r\n    logEvent( weatherReportParams.getReportHeadersLine1() ); \r\n    logEvent( weatherReportParams.getReportHeadersLine2() );\r\n\r\n    // Get Countries & load on select HTML tags.\r\n    countryCodesNames = _countries_mjs__WEBPACK_IMPORTED_MODULE_2__.getCountryCodesNames()\r\n    .then( countryCodesNames => {\r\n        setCountrySelectOptions( countryCodesNames );\r\n        eventEnd();\r\n    })\r\n    .catch( error => {\r\n        // Error.\r\n        logEvent( `DOM Content Event Error ${ error }`);\r\n    })\r\n}\r\n    \r\nfunction eventLoad() {\r\n    /*\r\n     * loaded: CSS loaded.\r\n     * USAGE:\r\n     * ------\r\n     *  IN: N/A.\r\n     * OUT: N/A.\r\n     */\r\n    setTimeout(() => {\r\n        logEvent( 'Load Event.....' );\r\n    }, 2000);\r\n}\r\n/*\r\n * Events with arrow functions.\r\n */\r\nedlLocationCtrl.addEventListener( 'blur' , ( e ) => {\r\n    /*\r\n     * Tabbing out of the Location field.\r\n     * USAGE:\r\n     * ------\r\n     *  IN: N/A.\r\n     * OUT: N/A.\r\n     */\r\n    logEvent( 'Location entered' );  \r\n    eventStart();\r\n\r\n    // Reset Select Country to default value.\r\n    document.getElementById( 'selCountry' ).selectedIndex = \"0\";\r\n    eventEnd();\r\n});\r\n\r\nselCountryCtrl.addEventListener( 'change', ( e ) => {\r\n    /*\r\n    * Change event for the Select Country dropdown.\r\n    */\r\n    eventStart();\r\n    logEvent( 'Country selected :' + e.target.value );\r\n    eventEnd();\r\n});\r\n/*\r\n * Event Methods....Click.\r\n */\r\nfunction eventClickBtnEnter() {\r\n    /*\r\n     * Get weather for location/country selected.\r\n     * USAGE:\r\n     * ------\r\n     *  IN: N/A.\r\n     * OUT: N/A.\r\n     */\r\n    let selCountryCode = null;\r\n    let urlAddress     = null;\r\n    let urlAddressIcon = null;\r\n    let edlLocation    = null;\r\n    /*\r\n     * Get form control values & session storage.\r\n     */\r\n    eventStart();\r\n    logEvent( 'Enter Button clicked' );   \r\n    /*\r\n     * Get location from session storage & countries & load on select HTML tags..\r\n     */\r\n    edlLocation    = sessionStorage.getItem( 'edlLocation' );    \r\n    selCountryCode = document.getElementById( 'selCountry' ).value;\r\n    /*\r\n     * Append country code to location if selected.\r\n     */\r\n    if ( selCountryCode != 'Select' ) {\r\n        edlLocation   += ',' + selCountryCode;\r\n    }\r\n    /*\r\n     * Get url address.\r\n     */\r\n    urlAddress = _weatherReportMethods_mjs__WEBPACK_IMPORTED_MODULE_3__.getUrlAddress( edlLocation, weatherReportParams );\r\n    /*\r\n     * Get the weather data from Json file from website using urlAddress.\r\n     */\r\n    _weatherReportMethods_mjs__WEBPACK_IMPORTED_MODULE_3__.fetchWeatherData( urlAddress )\r\n    .then( weatherData => {\r\n        /*\r\n         * Instantiate Weather Report Class. & populate data.\r\n         */\r\n        let weatherReportClass = new _weatherReportClass_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"]( weatherData );\r\n        /*\r\n         * Populate Weather Report Class. with Weather Data JSON file.\r\n         */\r\n        weatherReportClass.setWeatherReport( weatherData );\r\n        /*\r\n         * Get Weather Icon.\r\n         */\r\n        urlAddressIcon = _weatherReportMethods_mjs__WEBPACK_IMPORTED_MODULE_3__.getUrlAddressIcon( weatherReportParams.getUrlIcon(), weatherReportClass.getWeatherIcon() );\r\n        showWeatherResults( weatherReportClass, urlAddressIcon );\r\n    })  \r\n    .catch( error => {\r\n        /*\r\n         * Raise error if weather data cannot be obtained.\r\n         */\r\n        console.log( error )\r\n        alert( 'Cannot obtain Weather Information for ' + edlLocation );\r\n    });\r\n    /*\r\n     * Pass data back to the form controls.\r\n     */\r\n    eventEnd();\r\n}\r\n\r\nfunction eventClickBtnClear() {\r\n    /*\r\n     * Reset page to default values.\r\n     * USAGE:\r\n     * ------\r\n     *  IN: N/A.\r\n     * OUT: N/A.\r\n     */\r\n    eventStart();\r\n    logEvent( 'Clear Button clicked' );   \r\n\r\n    sessionStorage.setItem( 'edlLocation', '' );\r\n    document.getElementById( 'selCountry' ).selectedIndex = \"0\";\r\n\r\n    clearWeatherResults();\r\n    eventEnd();\r\n}\r\n\r\n/*\r\n * Functions called by the above events.\r\n */\r\nfunction setCountrySelectOptions( anyCountryCodesNames ) {\r\n    /*\r\n     * Returns HTML Select Element form given array of countries.\r\n     *\r\n     * USAGE\r\n     * -----\r\n     *  IN: anyCountryNames.\r\n     * OUT: N/A.\r\n     */\r\n    const countryCodes  = anyCountryCodesNames[0];\r\n    const countryNames  = anyCountryCodesNames[1];\r\n\r\n    const selectLine = new Option( 'Select Country', 'Select');\r\n    document.getElementById( 'selCountry' ).add( selectLine );\r\n    \r\n    for ( let idx = 0; idx < countryNames.length; idx++ ) {\r\n        const newOption = new Option( countryNames[idx], countryCodes[idx] );\r\n        document.getElementById( 'selCountry' ).add( newOption );\r\n    }\r\n\r\n    sessionStorage.setItem( 'countryCodes', JSON.stringify( countryCodes ) );\r\n    sessionStorage.setItem( 'countryNames', JSON.stringify( countryNames ) ) ;\r\n}\r\n\r\nfunction showWeatherResults( anyWeatherReportClass, urlAdddressIcon ) {\r\n    /*\r\n     * Shows weather results from a given Weather Report Class and Icon from a given url address.\r\n     *\r\n     * USAGE:\r\n     * ------\r\n     *  IN: anyWeatherReportClass\r\n     * OUT: N/A.\r\n     */\r\n    document.querySelector( '.weather-results' ).style.display = \"grid\";\r\n\r\n    const selCountry               = document.getElementById( 'selCountry' );\r\n    const divWeatherHeader         = document.getElementById( 'weather-header' );\r\n    const divWeatherDescription    = document.getElementById( 'weather-description' );\r\n    const divWeatherTtemp          = document.getElementById( 'weather-temp' );\r\n    const divWeatherFeelsLike      = document.getElementById( 'weather-feels-like' );\r\n    const divWeatherTempMin        = document.getElementById( 'weather-temp-min' );\r\n    const divWeatherTempMax        = document.getElementById( 'weather-temp-max' );\r\n    const divWeatherHumidity       = document.getElementById( 'weather-humidity' );\r\n    const divWeatherPressure       = document.getElementById( 'weather-pressure' );\r\n    const divWeatherWindSpeed      = document.getElementById( 'weather-wind-speed' );\r\n    const divWeatherWwindDirection = document.getElementById( 'weather-wind-direction' );\r\n    /*\r\n     * Get country name.\r\n     */\r\n    let selCountryName = _countries_mjs__WEBPACK_IMPORTED_MODULE_2__.getCountryName( selCountry.options, anyWeatherReportClass.getSysCountry() );\r\n    /*\r\n     * Build the Weather Results.\r\n     */\r\n    divWeatherHeader.innerHTML  = anyWeatherReportClass.getName();\r\n    divWeatherHeader.innerHTML += '<br>' + selCountryName;\r\n    \r\n    divWeatherDescription.innerHTML    = anyWeatherReportClass.getWeatherDescription();\r\n    document.getElementById( 'weather-icon1' ).src = urlAdddressIcon;\r\n \r\n    divWeatherTtemp.innerHTML          = anyWeatherReportClass.getMainTemp() + 'c';\r\n    divWeatherFeelsLike.innerHTML      = anyWeatherReportClass.getMainFeelsLike() + 'c'; \r\n    divWeatherTempMin.innerHTML        = anyWeatherReportClass.getMainTempMin() + 'c';\r\n    divWeatherTempMax.innerHTML        = anyWeatherReportClass.getMainTempMax() + 'c';\r\n    divWeatherHumidity.innerHTML       = anyWeatherReportClass.getMainPressure() + ' isobars';\r\n    divWeatherPressure.innerHTML       = anyWeatherReportClass.getMainHumidity();\r\n    divWeatherWindSpeed.innerHTML      = anyWeatherReportClass.getWindSpeed() + 'mph';\r\n    divWeatherWwindDirection.innerHTML = anyWeatherReportClass.getWindDeg();\r\n    /*\r\n     * Place data on console for debugging purposes.\r\n     */\r\n    console.log(\r\n`WEATHER_CONDITIONS: ${anyWeatherReportClass.getWeatherMain()}\r\n               Desc: ${anyWeatherReportClass.getWeatherDescription()}\r\n               Icon: ${anyWeatherReportClass.getWeatherIcon()}\r\n               Temp: ${anyWeatherReportClass.getMainTemp()}\r\n         Feels Like: ${anyWeatherReportClass.getMainFeelsLike()}\r\n           Min Temp: ${anyWeatherReportClass.getMainTempMin()}\r\n           Max Temp: ${anyWeatherReportClass.getMainTempMax()}\r\n           Pressure: ${anyWeatherReportClass.getMainPressure()}\r\n           Humidity: ${anyWeatherReportClass.getMainHumidity()}\r\n         Wind Speed: ${anyWeatherReportClass.getWindSpeed()}\r\n     Wind Direction: ${anyWeatherReportClass.getWindDeg()}`);\r\n\r\n    console.log( 'OK: \\n' + anyWeatherReportClass.getName() );\r\n    console.log( `${anyWeatherReportClass.getMainTemp()}\\n${anyWeatherReportClass.getCloudsAll()}\\n${anyWeatherReportClass.getName()}\\n${anyWeatherReportClass.getSysCountry()}` )\r\n    console.log( 'Pass back to browser');\r\n}\r\n\r\nfunction clearWeatherResults() {\r\n    /*\r\n     * Clear Weather Results.\r\n     *\r\n     * USAGE:\r\n     * ------\r\n     *  IN: N/A\r\n     * OUT: N/A\r\n     */\r\n    document.getElementById( 'weather-header' ).innerHTML = '';\r\n    document.getElementById( 'weather-description' ).innerHTML = '';\r\n    document.getElementById( 'weather-icon1' ).src = 'DUMMY';\r\n    document.getElementById( 'weather-temp' ).innerHTML = '';\r\n    document.getElementById( 'weather-feels-like' ).innerHTML = '';\r\n    document.getElementById( 'weather-temp-min' ).innerHTML = '';\r\n    document.getElementById( 'weather-temp-max' ).innerHTML = '';\r\n    document.getElementById( 'weather-humidity' ).innerHTML = '';\r\n    document.getElementById( 'weather-pressure' ).innerHTML = '';\r\n    document.getElementById( 'weather-wind-speed' ).innerHTML = '';\r\n    document.getElementById( 'weather-wind-direction' ).innerHTML = '';\r\n\r\n    document.querySelector( '.weather-results' ).style.display = \"none\";\r\n}\r\n\r\n/*\r\n * Common Event Functions.\r\n */\r\nfunction eventStart() {\r\n    /*\r\n     * Get Form Controls that get passed to Session Storage then pass to\r\n     * Weather Report Params.\r\n     * \r\n     * USAGE:\r\n     * ------\r\n     *  IN: N/A.\r\n     * OUT: N/A.\r\n     */\r\n    getFormControls();                                              // Get form controls.\r\n    weatherReportParams = getSessionStorage( weatherReportParams ); // Pass session storage to Weather Report Params class.\r\n}\r\n\r\nfunction eventEnd() {\r\n    /*\r\n     * Set Session Storage from Weather Report Params, set which form controls should be disabled\r\n     * then pass Session Storage to Form Controls.\r\n     * \r\n     * USAGE:\r\n     * ------\r\n     *  IN: N/A.\r\n     * OUT: N/A.\r\n     */\r\n    setSessionStorage( weatherReportParams );    // Pass Weather Report Class to Session storage.\r\n    setFormControlsDisabled();                   // Determine what controls should be enabled/disabled.\r\n    setFormControls();                           // Set form controls.\r\n}\r\n/*\r\n * Session Storage Control Functions...Session Storage allows values to be held during the life of a page's\r\n * existence.\r\n */\r\nfunction getSessionStorage( anyWeatherReportParams ) {\r\n    /*\r\n     * Returns the Weather Report Params Class passed from session storage.\r\n     *\r\n     * USAGE:\r\n     * ------\r\n     *  IN: anyWeatherReportParams.\r\n     * OUT: anyWeatherReportParams.\r\n     */\r\n    anyWeatherReportParams.setAppName(            sessionStorage.getItem( 'appName' ) );\r\n    anyWeatherReportParams.setUrlAddPrefix(       sessionStorage.getItem( 'urlAddPrefix' ) );\r\n    anyWeatherReportParams.setUrlAddAppId(        sessionStorage.getItem( 'urlAddAppId' ) );\r\n    anyWeatherReportParams.setUrlAppUnitMeasure(  sessionStorage.getItem( 'urlAppUnitMeasure' ) ); \r\n    anyWeatherReportParams.setUrlIcon(            sessionStorage.getItem( 'urlIcon' ) );\r\n    anyWeatherReportParams.setAppNarrative1(      sessionStorage.getItem( 'appNarrative1' ) );\r\n    anyWeatherReportParams.setAppNarrative2(      sessionStorage.getItem( 'appNarrative2' ) );\r\n    anyWeatherReportParams.setAppInstructs(       sessionStorage.getItem( 'appInstructs' ) );\r\n    anyWeatherReportParams.setPoweredBy(          sessionStorage.getItem( 'poweredBy' ) );\r\n    anyWeatherReportParams.setAppError(           sessionStorage.getItem( 'appError' ) );\r\n    anyWeatherReportParams.setReportPath(         sessionStorage.getItem( 'reportPath' ) );\r\n    anyWeatherReportParams.setReportHeadersLine1( sessionStorage.getItem( 'reportHeadersLine1' ) );\r\n    anyWeatherReportParams.setReportHeadersLine2( sessionStorage.getItem( 'reportHeadersLine2' ) );\r\n\r\n    logEvent( 'Weather Report Params <-- Session Storage.' );\r\n\r\n    return anyWeatherReportParams;\r\n}\r\n\r\nfunction setSessionStorage( anyWeatherReportParams ) {\r\n    /*\r\n     * Sets the session storage from a given Weather Report Params Class passed in.\r\n     *\r\n     * USAGE:\r\n     * ------ \r\n     *  IN: weatherReportParams.\r\n     * OUT: N/A\r\n     */\r\n    sessionStorage.setItem( 'appName'           , anyWeatherReportParams.getAppName() );\r\n    sessionStorage.setItem( 'urlAddPrefix'      , anyWeatherReportParams.getUrlAddPrefix() );\r\n    sessionStorage.setItem( 'urlAddAppId'       , anyWeatherReportParams.getUrlAddAppId() );\r\n    sessionStorage.setItem( 'urlAppUnitMeasure' , anyWeatherReportParams.getUrlAppUnitMeasure() );\r\n    sessionStorage.setItem( 'urlIcon'           , anyWeatherReportParams.getUrlIcon() );\r\n    sessionStorage.setItem( 'appNarrative1'     , anyWeatherReportParams.getAppNarrative1() );\r\n    sessionStorage.setItem( 'appNarrative2'     , anyWeatherReportParams.getAppNarrative2() );\r\n    sessionStorage.setItem( 'appInstructs'      , anyWeatherReportParams.getAppInstructs() );\r\n    sessionStorage.setItem( 'poweredBy'         , anyWeatherReportParams.getPoweredBy() );\r\n    sessionStorage.setItem( 'appError'          , anyWeatherReportParams.getAppError() );\r\n    sessionStorage.setItem( 'reportPath'        , anyWeatherReportParams.getReportPath() );\r\n    sessionStorage.setItem( 'reportHeadersLine1', anyWeatherReportParams.getReportHeadersLine1() );\r\n    sessionStorage.setItem( 'reportHeadersLine2', anyWeatherReportParams.getReportHeadersLine2() );\r\n    \r\n    logEvent( 'Session Storage <-- Weather Report Params.' );    \r\n}\r\n/*\r\n * Form Control Functions.\r\n */\r\nfunction getFormControls() {\r\n   /*\r\n    * Sets the controls on the page using a given Weather Report Params.\r\n    *\r\n    * USAGE:\r\n    * ------\r\n    *  IN: N/A.\r\n    * OUT: N/A.\r\n    */\r\n    sessionStorage.setItem( 'appName'      , document.getElementById( 'lblAppName'       ).innerHTML );\r\n    sessionStorage.setItem( 'appNarrative1', document.getElementById( 'lblAppNarrative1' ).innerHTML );\r\n    sessionStorage.setItem( 'appNarrative2', document.getElementById( 'lblAppNarrative2' ).innerHTML );\r\n    sessionStorage.setItem( 'appInstructs' , document.getElementById( 'lblAppInstructs'  ).innerHTML ); \r\n    sessionStorage.setItem( 'poweredBy'    , document.getElementById( 'lblPoweredBy'     ).innerHTML );\r\n\r\n    sessionStorage.setItem( 'edlLocation', edlLocationCtrl.value );\r\n    sessionStorage.setItem( 'selCountry' , selCountry.text );\r\n\r\n    logEvent( 'Session Storage <-- Form Controls.' );     \r\n}\r\n\r\nfunction setFormControls() {\r\n    /*\r\n     * Sets the controls on the page using a given Weather Report Params.\r\n     *\r\n     * USAGE:\r\n     * ------\r\n     *  IN: N/A\r\n     * OUT: N/A\r\n     */\r\n    document.getElementById( 'lblAppName'       ).innerHTML = sessionStorage.getItem( 'appName' );\r\n    document.getElementById( 'lblAppNarrative1' ).innerHTML = sessionStorage.getItem( 'appNarrative1' );\r\n    document.getElementById( 'lblAppNarrative2' ).innerHTML = sessionStorage.getItem( 'appNarrative2' );\r\n    document.getElementById( 'lblAppInstructs'  ).innerHTML = sessionStorage.getItem( 'appInstructs' );\r\n    document.getElementById( 'lblPoweredBy'     ).innerHTML = sessionStorage.getItem( 'poweredBy' );\r\n\r\n    document.getElementById( 'edlLocation' ).value = sessionStorage.getItem( 'edlLocation' );\r\n    document.getElementById( 'selCountry'  ).text  = sessionStorage.getItem( 'selCountry' );\r\n\r\n    logEvent( 'Form Controls <-- Session Storage.' );\r\n}\r\n\r\nfunction setFormControlsDisabled() {\r\n    /*\r\n     * Disable/enable btnEnter based upon value in edlLocation.\r\n     * USAGE:\r\n     * ------\r\n     *  IN: N/A.\r\n     * OUT: N/A.\r\n     */\r\n    if ( edlLocationCtrl.value == undefined ) {\r\n         edlLocationCtrl.value = '';\r\n    }\r\n    let isBtnEnterDisabled = ( edlLocationCtrl.value.length == 0 );\r\n    document.getElementById( 'btnEnter' ).disabled = isBtnEnterDisabled;\r\n}\r\n\r\nfunction logEvent( anyEventMessage ) {\r\n    /*\r\n     * Displays to teh console, an given event message.\r\n     *\r\n     * USAGE:\r\n     * ------\r\n     *  IN: anyEventMessage.\r\n     * OUT: N/A.\r\n     */\r\n    console.log( anyEventMessage );\r\n}\n\n//# sourceURL=webpack://MyCustomLibrary/./src/js/index.js?");

/***/ }),

/***/ "?decb":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://MyCustomLibrary/fs_(ignored)?");

/***/ }),

/***/ "./src/js/countries.mjs":
/*!******************************!*\
  !*** ./src/js/countries.mjs ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCountryCodesNames: () => (/* binding */ getCountryCodesNames),\n/* harmony export */   getCountryName: () => (/* binding */ getCountryName)\n/* harmony export */ });\n/*\r\n * Script       :countries.mjs\r\n * Author       :Richard Maida Jimenez\r\n * Date         :November 2024.\r\n * Version      :1.0.\r\n * Description  :Methods relating to the countries JSON for the Weather Report Page.\r\n * \r\n * Version  Date        Author                  Comments\r\n * -------  -------     ---------------------   --------\r\n * 1.00     17/10/2024  Richard Maida Jimenez   Website Cloning Project - New Code.\r\n */\r\nasync function getCountryCodesNames() {\r\n/*\r\n * Returns Country Data from JSON file.\r\n *\r\n * USAGE\r\n * -----\r\n *  IN: N/A.\r\n * OUT: countryCodesNames.\r\n *          [0] - countryCodes.\r\n *          [1] - countryNames.\r\n */\r\n    let response       = null;\r\n    let countriesJson  = null;\r\n\r\n    let countriesArray    = [];\r\n    let countryLine       = [];\r\n    let countryCodes      = [];\r\n    let countryNames      = [];\r\n    let countryCodesNames = []\r\n\r\n    // Read the JSON file & convert to array.\r\n    try {\r\n        response       = await fetch( './countries.json' );\r\n        countriesJson  = await response.json();\r\n        countriesArray = Object.values( countriesJson );\r\n\r\n        // Iterate array to create country codes and names arrays.\r\n        for ( let idx = 0; idx < countriesArray.length; idx++ ) {\r\n            countryLine = Object.values( countriesArray[idx] );\r\n            countryCodes[idx] = countryLine[0];  //].push( countryLine[0] );\r\n            countryNames[idx] = countryLine[2];  //.push( countryLine[2] );\r\n        }\r\n\r\n        // Place codes & names arrays into a codeName array.\r\n        countryCodesNames.push( countryCodes );\r\n        countryCodesNames.push( countryNames );\r\n\r\n        return countryCodesNames;\r\n    \r\n    } catch ( error ) {\r\n        console.error( 'Error reading or parsing JSON:', error );\r\n    }\r\n}\r\n\r\nfunction getCountryName( anySelCountryOptions, anySysCountry ) {\r\n    /*\r\n     * Returns Country Name a given Country Code.\r\n     *\r\n     * USAGE:\r\n     * ------\r\n     *  IN: anySelCountryOptions\r\n     *      anySysCountry\r\n     * OUT: countryName\r\n     */\r\n    let countryName = null;\r\n\r\n    for ( let idx = 0; idx < anySelCountryOptions.length; idx++ ) {\r\n        if ( anySelCountryOptions[idx].value === anySysCountry ) {\r\n            countryName  = anySelCountryOptions[idx].text;\r\n            idx          = anySelCountryOptions.length;\r\n        }\r\n    }\r\n\r\n    return countryName;\r\n}\n\n//# sourceURL=webpack://MyCustomLibrary/./src/js/countries.mjs?");

/***/ }),

/***/ "./src/js/weatherReportClass.mjs":
/*!***************************************!*\
  !*** ./src/js/weatherReportClass.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ weatherReportClass)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"?decb\");\n/*\r\n * Script       :weatherReportClass.mjs\r\n * Author       :Richard Maida Jimenez\r\n * Date         :November 2024.\r\n * Version      :1.0.\r\n * Description  :Class and Methods associated with the Weather Report web app.\r\n */\r\n//const fs = require( 'node:fs');\r\n\r\n/*\r\n * Declare Class.\r\n */\r\nclass weatherReportClass {\r\n\r\n    _coordLon = null;\r\n    _coordLat = null;\r\n    \r\n    _weatherId          = null;\r\n    _weatherMain        = null;\r\n    _weatherDescription = null;\r\n    _weatherIcon        = null;\r\n    \r\n    _base = null;\r\n    \r\n    _mainTemp      = null;\r\n    _mainFeelsLike = null;\r\n    _mainTempMin   = null;\r\n    _mainTempMax   = null;\r\n    _mainPressure  = null;\r\n    _mainHumidity  = null;\r\n    _mainSeaLevel  = null;\r\n    _mainGrndLevel = null;\r\n    \r\n    _visibility = null;\r\n    \r\n    _windSpeed = null;\r\n    _windDeg   = null;\r\n    \r\n    _cloudsAll = null;\r\n    _dt        = null;\r\n    \r\n    _sysType    = null;\r\n    _sysId      = null;\r\n    _sysCountry = null;\r\n    _sysSunrise = null;\r\n    _sysSunset  = null;\r\n    \r\n    _timezone = null;\r\n    _id       = null;\r\n    _name     = null;\r\n    _cod      = null;\r\n    /*\r\n     * Constructor.\r\n     */\r\n    constructor() {\r\n        /*\r\n         * Just instantiating the class.\r\n         */\r\n    }\r\n    /*\r\n     * Accessor Methods.\r\n     */\r\n    getCoordLon() {\r\n        return this._coordLon;\r\n    }\r\n\r\n    setCoordLon( anyCoordLon ) {\r\n        this._coordLon = anyCoordLon;\r\n    }\r\n\r\n    getCoordLat() {\r\n        return this._coordLat;\r\n    }\r\n    \r\n    setCoordLat( anyCoordLat ) {\r\n        this._coordLat = anyCoordLat;\r\n    }\r\n    \r\n    getWeatherId() {\r\n        return this._weatherId;\r\n    }\r\n\r\n    setWeatherId( anyWeatherId ) {\r\n        this._weatherId = anyWeatherId;\r\n    }\r\n\r\n    getWeatherMain() {\r\n        return this._weatherMain;\r\n    }\r\n\r\n    setWeatherMain( anyWeatherMain ) {\r\n        this._weatherMain = anyWeatherMain;\r\n    }\r\n\r\n    getWeatherDescription() {\r\n        return this._weatherDescription;\r\n    }\r\n    \r\n    setWeatherDescription( anyWeatherDescription ) {\r\n        this._weatherDescription = anyWeatherDescription;\r\n    }\r\n\r\n    getWeatherIcon() {\r\n        return this._weatherIcon;\r\n    }\r\n\r\n    setWeatherIcon( anyWeatherIcon ) {\r\n        this._weatherIcon = anyWeatherIcon;\r\n    }\r\n\r\n    getBase() {\r\n        return this._base;\r\n    }\r\n\r\n    setBase( anyBase ) {\r\n        this._base = anyBase;\r\n    }\r\n\r\n    getMainTemp() {\r\n        return this._mainTemp;\r\n    }\r\n\r\n    setMainTemp( anyMainTemp ) {\r\n        this._mainTemp = anyMainTemp;\r\n    }\r\n\r\n    getMainFeelsLike() {\r\n        return this._mainFeelsLike;\r\n    }\r\n\r\n    setMainFeelsLike( anyMainFeelsLike ) {\r\n        this._mainFeelsLike = anyMainFeelsLike;\r\n    }\r\n\r\n    getMainTempMin() {\r\n        return this._mainTempMin;\r\n    }\r\n\r\n    setMainTempMin( anyMainTempMin ) {\r\n        this._mainTempMin = anyMainTempMin;\r\n    }\r\n\r\n    getMainTempMax() {\r\n        return this._mainTempMax;\r\n    }\r\n\r\n    setMainTempMax( anyMainTempMax ) {\r\n        this._mainTempMax = anyMainTempMax;\r\n    }\r\n\r\n    getMainPressure() {\r\n        return this._mainPressure;\r\n    }\r\n\r\n    setMainPressure( anyMainPressure ) {\r\n        this._mainPressure = anyMainPressure;\r\n    }\r\n\r\n    getMainHumidity() {\r\n        return this._mainHumidity;\r\n    }\r\n\r\n    setMainHumidity( anyMainHumidity ) {\r\n        this._mainHumidity = anyMainHumidity;\r\n    }\r\n\r\n    getMainSeaLevel() {\r\n        return this._mainSeaLevel;\r\n    }\r\n    \r\n    setMainSeaLevel( anyMainSeaLevel ) {\r\n        this._mainSeaLevel = anyMainSeaLevel;\r\n    }\r\n\r\n    getMainGrndLevel() {\r\n        return this._mainGrndLevel;\r\n    }\r\n\r\n    setMainGrndLevel( anyMainGrndLevel ) {\r\n        this._mainGrndLevel = anyMainGrndLevel;\r\n    }\r\n\r\n    getVisibility() {\r\n        return this._visibility;\r\n    }\r\n\r\n    setVisibility( anyVisibility ) {\r\n        this._visibility = anyVisibility;\r\n    }\r\n    \r\n    getWindSpeed() {\r\n        return this._windSpeed;\r\n    }\r\n\r\n    setWindSpeed( anyWindspeed ) {\r\n        this._windSpeed = anyWindspeed;\r\n    }   \r\n\r\n    getWindDeg() {\r\n        return this._windDeg;\r\n    }\r\n\r\n    setWindDeg( anyWindDeg ) {\r\n        this._windDeg = anyWindDeg;\r\n    }\r\n\r\n    getCloudsAll() {\r\n        return this._cloudsAll;\r\n    }\r\n\r\n    setCloudsAll( anyCloudsAll ) {\r\n        this._cloudsAll = anyCloudsAll;\r\n    }\r\n\r\n    getDt() {\r\n        return this._dt;\r\n    }\r\n    \r\n    setDt( anyDt ) {\r\n        this._dt = anyDt;\r\n    }\r\n\r\n    getSysType() {\r\n        return this._sysType;\r\n    }\r\n    \r\n    setSysType( anySysType ) {\r\n        this._sysType = anySysType;\r\n    }\r\n\r\n    getSysId() {\r\n        return this._sysId;\r\n    }\r\n\r\n    setSysId( anyId ) {\r\n        this._sysId = anyId;\r\n    }\r\n\r\n    getSysCountry() {\r\n        return this._sysCountry;\r\n    }\r\n\r\n    setSysCountry( anySysCountry ) {\r\n        this._sysCountry = anySysCountry;\r\n    }\r\n\r\n    getSysSunrise() {\r\n        return this._sysSunrise;\r\n    }\r\n\r\n    setSysSunrise( anySysSunrise ) {\r\n        this._sysSunrise = anySysSunrise;\r\n    }\r\n\r\n    getSysSunset() {\r\n        return this._sysSunset;\r\n    }\r\n    \r\n    setSysSunset( anySysSunset ) {\r\n        this._sysSunset = anySysSunset;\r\n    }\r\n\r\n    getTimeZone() {\r\n        return this._timezone;\r\n    }\r\n\r\n    setTimeZone( anyTimeZone ) {\r\n        this._timezone = anyTimeZone;\r\n    }\r\n\r\n    getId() {\r\n        return this._id;\r\n    }\r\n\r\n    setId( anyId ) {\r\n        this._id = anyId;\r\n    }\r\n\r\n    getName() {\r\n        return this._name;\r\n    }\r\n\r\n    setName( anyName ) {\r\n        this._name = anyName;\r\n    }\r\n\r\n    getCod() {\r\n        return this._cod;\r\n    }\r\n\r\n    setCod( anyCod ) {\r\n        this._cod = anyCod;\r\n    }\r\n\r\n    getWeatherReport() {\r\n\r\n    }\r\n\r\n    setWeatherReport( anyJson ) {\r\n\r\n        this.setCoordLon( anyJson.coord.lon ); \r\n        this.setCoordLat( anyJson.coord.lat );\r\n        \r\n        this.setWeatherId( anyJson.weather[0].id );\r\n        this.setWeatherMain( anyJson.weather[0].main );\r\n        this.setWeatherDescription( anyJson.weather[0].description );\r\n        this.setWeatherIcon( anyJson.weather[0].icon );\r\n           \r\n        this.setBase(  anyJson.base );\r\n        \r\n        this.setMainTemp( anyJson.main.temp );\r\n        this.setMainFeelsLike( anyJson.main.feels_like ); \r\n        this.setMainTempMin( anyJson.main.temp_min );\r\n        this.setMainTempMax( anyJson.main.temp_max );\r\n        this.setMainPressure( anyJson.main.pressure );\r\n        this.setMainHumidity( anyJson.main.humidity );\r\n        this.setMainSeaLevel( anyJson.main.sea_level );\r\n        this.setMainGrndLevel( anyJson.main.grnd_level );\r\n        \r\n        this.setVisibility( anyJson.visibility );\r\n        \r\n        this.setWindSpeed( anyJson.wind.speed );\r\n        this.setWindDeg( anyJson.wind.deg );\r\n        \r\n        this.setCloudsAll( anyJson.clouds.all );\r\n        this.setDt( anyJson.dt );\r\n        \r\n        this.setSysType( anyJson.sys.type );\r\n        this.setSysId( anyJson.sys.id );\r\n        this.setSysCountry( anyJson.sys.country );\r\n        this.setSysSunrise( anyJson.sys.sunrise );\r\n        this.setSysSunset( anyJson.sys.sunset );\r\n        \r\n        this.setTimeZone( anyJson.timezone );\r\n        this.setId( anyJson.id );\r\n        this.setName( anyJson.name );\r\n        this.setCod( anyJson.cod );\r\n    }\r\n\r\n    updateReportLog( anyWeatherReportParams ) {\r\n\r\n        let fsDateSuffix  = this.setDateFs()\r\n        let fsNameParam   = anyWeatherReportParams.getReportPath()\r\n        let fsNameUse     = fsNameParam.replace( '[DATE]', fsDateSuffix );\r\n        let reportHeaders = anyWeatherReportParams.getReportHeadersLine1() + '\\n';\r\n        reportHeaders    += anyWeatherReportParams.getReportHeadersLine2();\r\n\r\n        let reportLog  = this.readReportLog( fsNameUse, reportHeaders ); \r\n        let reportLine = null;\r\n\r\n        reportLine  = this.getCoordLon() + ',';\r\n        reportLine += this.getCoordLat() + ',';\r\n        \r\n        reportLine += this.getWeatherId() + ',';\r\n        reportLine += this.getWeatherMain() + ',';\r\n        reportLine += this.getWeatherDescription() + ',';\r\n        reportLine += this.getWeatherIcon() + ',';\r\n        \r\n        reportLine += this.getBase() + ',';\r\n\r\n        reportLine += this.getMainTemp() + ',';\r\n        reportLine += this.getMainFeelsLike() + ',';\r\n        reportLine += this.getMainTempMin() + ',';\r\n        reportLine += this.getMainTempMax() + ',';\r\n        reportLine += this.getMainPressure() + ',';\r\n        reportLine += this.getMainHumidity() + ',';\r\n        reportLine += this.getMainSeaLevel() + ',';\r\n        reportLine += this.getMainGrndLevel() + ',';\r\n\r\n        reportLine += this.getVisibility() + ',';\r\n        \r\n        reportLine += this.getWindSpeed() + ',';\r\n        reportLine += this.getWindDeg() + ',';\r\n        reportLine += this.getCloudsAll() + ',';\r\n        reportLine += this.getDt() + ',';\r\n        \r\n        reportLine += this.getSysType() + ',';\r\n        reportLine += this.getSysId() + ',';\r\n        reportLine += this.getSysCountry() + ',';\r\n        reportLine += this.getSysSunrise() + ',';\r\n        reportLine += this.getSysSunset() + ',';\r\n        \r\n        reportLine += this.getTimeZone() + ',';\r\n        reportLine += this.getId() + ',';\r\n        reportLine += this.getName() + ',';\r\n        reportLine += this.getCod() + '\\n';\r\n\r\n        reportLog += reportLine;\r\n        this.writeReportLog( fsNameUse, reportLog );\r\n    }\r\n\r\n    readReportLog( anyFsName, anyFsColumnHeaders ) {\r\n        /*\r\n         * Read the Weather Report Log as a string.\r\n         */\r\n        let reportLog = null;\r\n        try {\r\n            reportLog = fs.readFileSync( anyFsName, 'utf8' )\r\n\r\n        } catch ( readFileError ) {\r\n            reportLog = anyFsColumnHeaders + '\\n'; // Break Line.\r\n        }\r\n\r\n        return reportLog;\r\n    }\r\n\r\n    writeReportLog( anyFsName, anyReportLog ) {\r\n        /*\r\n         * Write File Away To O/S.\r\n         */\r\n        fs.writeFile( anyFsName, anyReportLog,\r\n                    function( writeFileError ) {\r\n                        if ( writeFileError ) {\r\n                            console.log ( `Cannot write Report Log ${anyFsName}` );\r\n                        } else\r\n                            console.log( `Report Log written to ${anyFsName}` );\r\n                        }\r\n        ); \r\n    }\r\n    \r\n    setDateFs( ) {\r\n\r\n        const currentDate = new Date();\r\n        let   currDateUse = [];\r\n        let   currDateFs  = null;\r\n    \r\n        currDateUse[0] =   currentDate.getFullYear();\r\n        currDateUse[1] = ( currentDate.getMonth() + 1 );\r\n        currDateUse[2] = ( currentDate.getDate()) ;\r\n    \r\n        for ( let idx = 0; idx < currDateUse.length; idx++ ) {\r\n            if ( currDateUse[idx] < 10 ) {\r\n                currDateUse[idx] = '0' + currDateUse[idx];\r\n            }\r\n        }\r\n    \r\n        currDateUse = currDateUse.toString();\r\n        currDateFs  = currDateUse.replace( /,/g, '-');\r\n    \r\n        return currDateFs;\r\n    }\r\n}\n\n//# sourceURL=webpack://MyCustomLibrary/./src/js/weatherReportClass.mjs?");

/***/ }),

/***/ "./src/js/weatherReportMethods.mjs":
/*!*****************************************!*\
  !*** ./src/js/weatherReportMethods.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchWeatherData: () => (/* binding */ fetchWeatherData),\n/* harmony export */   getUrlAddress: () => (/* binding */ getUrlAddress),\n/* harmony export */   getUrlAddressIcon: () => (/* binding */ getUrlAddressIcon)\n/* harmony export */ });\n/* harmony import */ var _weatherReportParams_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./weatherReportParams.mjs */ \"./src/js/weatherReportParams.mjs\");\n/*\r\n * Script       :weatherReportMethods.mjs\r\n * Author       :Richard Maida Jimenez\r\n * Date         :November 2024.\r\n * Version      :1.0.\r\n * Description  :Methods associated with the Weather Report web app.\r\n */\r\n\r\n/*\r\n * Declare methods.\r\n */\r\nasync function fetchWeatherData( anyUrlAddress ) {\r\n    /*\r\n     * Returns weather data Json file from website using given url address.\r\n     *\r\n     * USAGE:\r\n     * ------\r\n     *  IN: anyUrlAddress\r\n     * OUT: weatherJson\r\n     */\r\n    let response     = '';\r\n    let weatherJson  = '';\r\n    \r\n    try {\r\n        response = await fetch( anyUrlAddress );\r\n\r\n        if ( !response.ok ) {\r\n            throw new Error( `HTTP error! status: ${response.status}` );\r\n        }\r\n        weatherJson = await response.json();\r\n        return weatherJson;\r\n\r\n    } catch( error ) {\r\n        console.log('Error fetching data:', error);\r\n        throw error; // Propagate the error to be handled by the caller\r\n    }\r\n}\r\n\r\nfunction getUrlAddress( anyLocation, anyWeatherReportParams )  {\r\n    /*\r\n     * Returns the URL Address using a given location.\r\n     *\r\n     * USAGE:\r\n     * ------\r\n     *  IN: anyLocation.\r\n     * OUT: urlAddress.\r\n     */    \r\n    let urlAddress = null;\r\n\r\n    urlAddress  = anyWeatherReportParams.getUrlAddPrefix();\r\n    urlAddress += anyLocation + '&';\r\n    urlAddress += anyWeatherReportParams.getUrlAddAppId() + '&'; \r\n    urlAddress += anyWeatherReportParams.getUrlAppUnitMeasure();\r\n\r\n    console.log( `URL Address: ${urlAddress}` ); \r\n\r\n    return urlAddress;\r\n}\r\n\r\nfunction getUrlAddressIcon( anyUrlIcon, anyWeatherIconCode ) {\r\n    /*\r\n     * Returns urlAddressIcon for any given url Icon and weather icon code.\r\n     * \r\n     * USAGE:\r\n     *  IN: anyUrlIcon\r\n     *      anyWeatherIconCode\r\n     * OUT: urlAddressIcon.\r\n    */\r\n    let urlAddressIcon = anyUrlIcon.replace( '[CODE]', anyWeatherIconCode );\r\n    return urlAddressIcon;\r\n}\n\n//# sourceURL=webpack://MyCustomLibrary/./src/js/weatherReportMethods.mjs?");

/***/ }),

/***/ "./src/js/weatherReportParams.mjs":
/*!****************************************!*\
  !*** ./src/js/weatherReportParams.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ weatherReportParams)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"?decb\");\n/*\r\n * Script       :weatherReportParams.mjs\r\n * Author       :Richard Maida Jimenez\r\n * Date         :November 2024.\r\n * Version      :1.0.\r\n * Description  :Class and Methods associated with the Weather Report Parameters for the Weather Report web app.\r\n */\r\n/*\r\n * Declare Imports.\r\n */\r\n\r\n/*\r\n * Parameter Line number constants.\r\n */\r\nconst plAppName           =  0;\r\nconst plUrlAddPrefix      =  1;\r\nconst plUrlAddAppId       =  2;\r\nconst plUrlAddUnitMeasure =  3;\r\nconst plUrlIcon           =  4;\r\nconst plAppNarrative1     =  5;\r\nconst plAppNarrative2     =  6;\r\nconst plAppInstructs      =  7;\r\nconst plPoweredBy         =  8;\r\nconst plReportPath        =  9;\r\nconst plReportHeaders1    = 10;\r\nconst plReportHeaders2    = 11;\r\n/*\r\n * Declare Class.\r\n */\r\nclass weatherReportParams {\r\n    /*\r\n     * All variables are private.\r\n     */\r\n    _appName            = null;\r\n    _urlAddPrefix       = null;\r\n    _urlAddAppId        = null;\r\n    _urlAppUnitMeasure  = null;\r\n    _urlIcon            = null;\r\n    _appNarrative1      = null;\r\n    _appNarrative2      = null;\r\n    _appInstructs       = null;\r\n    _poweredBy          = null;\r\n    _appError           = null;\r\n    _reportPath         = null;\r\n    _reportHeadersLine1 = null;\r\n    _reportHeadersLine2 = null;\r\n    /*\r\n     * Constructor.\r\n     */\r\n    constructor() {\r\n        /*\r\n        * Get Weather Report ini file using fs.readFileSync. Useful to keep changable stuff outside the code\r\n        * to allow parameter changes without having to change the actual code.\r\n        *\r\n        * USAGE:\r\n        * -----\r\n        * IN : N/A\r\n        * OUT: weatherReportIni.\r\n        */\r\n        let weatherReportIni = null;\r\n    }\r\n    /*\r\n     * Initiate Params.\r\n     */\r\n    initParams() {\r\n\r\n        this.setAppName( '<h1>Weather Report</h1>' );\r\n        this.setUrlAddPrefix( 'https://api.openweathermap.org/data/2.5/weather?q=' );\r\n        this.setUrlAddAppId( 'APPID=48b52bcbaeac33b00c86a36c1b6b5a16' );\r\n        this.setUrlAppUnitMeasure( 'units=metric' );\r\n        this.setUrlIcon( 'https://openweathermap.org/img/wn/[CODE]@2x.png' );\r\n        this.setAppNarrative1( 'Welcome to Weather Report.<br>No, not the jazz fusion group formed by Wayne Shorter.' );\r\n        this.setAppNarrative2( 'Click the link below to find out<br>more about the band<br><a href =\"https://weatherreportband.com/\" target=\"_blank\">Weather Report<a>' );\r\n        this.setAppInstructs( '<h3>How To Use</h3><p>Enter the location of your choice (mandatory).<br><br>Select a country (optional).<br><br>Please note that if you do not choose a country,<br>where there is more than one location with the same name,<br>Weather Report will assume one for you. However, it may not be<br>the location in the country you want.</p>' );\r\n        this.setPoweredBy( 'Powered by<br><a href=\"https://openweathermap.org/\" target=\"_blank\">OpenWeatherMap.org<a>' );\r\n        this.setReportPath( 'C:\\Users\\Richard Maida Jimene\\Desktop\\Portfolio\\Projects\\WeatherDashboard\\Reports\\WeatherReportLog-[DATE].csv' );\r\n        this.setReportHeadersLine1( ',,Weather,Weather,Weather,Weather,,Main,Main,Main,Main,Main,Main,Main,Main,,Wind,Wind,Clouds,,System,System,System,System,System,,,,' ); \r\n        this.setReportHeadersLine2( 'Longitude,Latitude,Id,Main,Description,Icon,Base,Temp,Feels Like,Temp Min,Temp Max,Pressure,Humidity,SeaLevel,Ground Level,Visibility,Speed,Deg,All,Date,Type,Id,Country,Sunrise,Sunset,Time Zone,Id,Name,COD');\r\n    }\r\n    /*\r\n     * Accessor methods (public).\r\n     */\r\n    getAppName() {\r\n        return this._appName;\r\n    }\r\n\r\n    setAppName( anyAppName ) {\r\n        this._appName = anyAppName;\r\n    }\r\n\r\n    getUrlAddPrefix() {\r\n        return this._urlAddPrefix;\r\n    }\r\n\r\n    setUrlAddPrefix( anyUrlAddPrefix ) {\r\n        this._urlAddPrefix = anyUrlAddPrefix;\r\n    }\r\n\r\n    getUrlAddAppId() {\r\n        return this._urlAddAppId;\r\n    }\r\n\r\n    setUrlAddAppId( anyUrlAddAppId ) {\r\n        this._urlAddAppId = anyUrlAddAppId;\r\n    }\r\n\r\n    getUrlAppUnitMeasure() {\r\n        return this._urlAppUnitMeasure;\r\n    }\r\n\r\n    setUrlAppUnitMeasure( anyUrlAppUnitMeasure ) {\r\n        this._urlAppUnitMeasure = anyUrlAppUnitMeasure;\r\n    }\r\n\r\n    getUrlIcon() {\r\n        return this._urlIcon;\r\n    }\r\n\r\n    setUrlIcon( anyUrlIcon ) {\r\n        this._urlIcon = anyUrlIcon;\r\n    }\r\n\r\n    getAppNarrative1() {\r\n        return this._appNarrative1;\r\n    }\r\n\r\n    setAppNarrative1( anyAppNarrative1 ) {\r\n        this._appNarrative1 = anyAppNarrative1;\r\n    }\r\n\r\n    getAppNarrative2() {\r\n        return this._appNarrative2;\r\n    }\r\n\r\n    setAppNarrative2( anyAppNarrative2 ) {\r\n        this._appNarrative2 = anyAppNarrative2;\r\n    }\r\n\r\n    getAppInstructs() {\r\n        return this._appInstructs;\r\n    }\r\n\r\n    setAppInstructs( anyAppInstructs ) {\r\n        this._appInstructs = anyAppInstructs;\r\n    }\r\n\r\n    getPoweredBy() {\r\n        return this._poweredBy;\r\n    }\r\n\r\n    setPoweredBy( anyPoweredBy ) {\r\n        this._poweredBy = anyPoweredBy;\r\n    }\r\n\r\n    getAppError() {\r\n        return this._appError;\r\n    }\r\n\r\n    setAppError( anyAppError ) {\r\n        return this._appError = anyAppError;\r\n    }\r\n\r\n    getAppError() {\r\n        return this._appError;\r\n    }\r\n\r\n    getReportPath() {\r\n        return this._reportPath;\r\n    }\r\n    \r\n    setReportPath( anyReportPath ) {\r\n        this._reportPath = anyReportPath;\r\n    }\r\n   \r\n    getReportHeadersLine1() {\r\n        return this._reportHeadersLine1;\r\n    }\r\n    \r\n    setReportHeadersLine1( anyReportHeaders1 ) {\r\n        this._reportHeadersLine1 = anyReportHeaders1;\r\n    }\r\n\r\n    getReportHeadersLine2() {\r\n        return this._reportHeadersLine2;\r\n    }\r\n    \r\n    setReportHeadersLine2( anyReportHeaders2 ) {\r\n        this._reportHeadersLine2 = anyReportHeaders2;\r\n    }\r\n\r\n    setUrlAddress( anyLocation )  {\r\n    \r\n        let urlAddress  = `${this.getUrlAddPrefix()}${anyLocation}&${this.getUrlAddAppId()}&${this.getUrlAppUnitMeasure()}`;\r\n        return urlAddress;\r\n    }\r\n}\n\n//# sourceURL=webpack://MyCustomLibrary/./src/js/weatherReportParams.mjs?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/bundle.js");
/******/ 	MyCustomLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;